5 STANDARD LOGGING LEVELS:

1.DEBUG
Detailed information, typically of interest only when diagnosing problems.

2.INFO
Confirmation that things are working correctly(as expected).

3.WARNING
An indication that something unexpected happend, or inidcative of some problem in the near future.
The software is still working as expected.

4.ERROR
Due to a more serios problem, software has not been able to perform some function.

5.CRITICAL
A serious error, indicating that the program itself may be unable to continue running.

Default level for logging is set to WARNING.That means it will capture everything that is WARNING or
above.(WARNING,ERROR,CRITICAL, it will ignore INFO and DEBUG statements)

If you dont specify specific LOGGER, u will be working with ROOT logger.Best pratical advice is to
use separate loggers that can be formatted differently.If u import a module in file.py where there were already specified root logger, the root logger from that module will override a logger in file.py.
So best scenario is to write separate loggers.

logger = logging.getLogger(__name__) # logger name is equal to module's name, best pratice
Formatting is added to file handler, not to a logger.
File handler is added to logger.
Anytime u log ERROR, include Traceback.


LOGS CHARACTHERISTICS:

1.Descriptive
2.Contextual
3.Reactive

1.They give u a piece of information
2.They give an overview of state of things at the moment
3.They allow you to take actions only after something happend

If you dont respect the nature of the log, u will produce only noise.
Logs are private intel from your software to keep you aware and react to situtations.Any log that cant give u that ability is pure noise.



